import re
from collections import OrderedDict

from aiogram import types

vacancy_per_user = {}


class Vacancy:
    # ToDo –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —à–∞–≥–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def __init__(self):
        self.stage = 0

        #—Å–æ–∑–¥–∞–µ—Ç –∏–∑ text_pattern —Å–ª–æ–≤–∞—Ä—å:
        #     'vacancy_title'
        self.STAGES = []
        for i in self.text_pattern.keys():
            self.STAGES.append(i)


    def __str__(self):
        return self.info

    text_pattern = OrderedDict({
        "vacancy_title": ("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏üëá",
            ('UNREAL ENGINE C++ DEVELOPER', 'UNREAL ENGINE DEVELOPER', 'GAME DESIGNER', '3D ARTIST')),
        "skill_level": ("–£—Ä–æ–≤–µ–Ω—å Skillüëá", ('junior', 'middle', 'senior')),
        "company_name": ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏üëá", ("None",)),
        "game_title": ("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ãüëá", ("Unknown",)),
        "art_code": ("art / code", ('art', 'code')),
        "years": ("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞üëá", ("None", 1, 2, 3, 4, 5)),
        "platform": ("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞üëá", (
            'PC, Console', 'PC', 'PC, VR', 'PC, Mobile', 'PC, Mobile, Console', 'PC, Mobile, Console, VR',
            'PC, Console, VR',
            'Mobile',
            'Console', 'VR')),
        "remote": ("–£–¥–∞–ª–µ–Ω–∫–∞?üëá", ("None", 'Remote')),
        "office": ("–û—Ñ–∏—Å –µ—Å—Ç—å? –ò–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥?üëá", ("None", "–Ω–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∏–µ–≤")),
        "money": ("üí∞ ?üëá", ('–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',)),
        "schedule": ("–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?", ('Full-time', 'Part-time', 'Contract')),
        "description": ("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", ('None',)),
        "resp": ("–ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å '=' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", ('None',)),
        "require": ("–¢–≤–æ–∏ —Å–∫–∏–ª–ª—ã '=' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", ('None',)),
        "plus": ("–ö—Ä—É—Ç–æ, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å '=' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", ('None',)),
        "cond": ("–£—Å–ª–æ–≤–∏—è –∏ –ø–ª—é—à–∫–∏ '=' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", ('None',)),
        "useful": (" –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '=' - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", ('None',)),
        "contacts": ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", ('Ingamejob', 'Djinni', "Head Hunter")),
    })

    # –ú–∞—Å—Å–∏–≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    info = {
    }

    # –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    # todo refactoring
    def get_markup(self):
        markup = types.ReplyKeyboardMarkup(row_width=len(self.text_pattern[self.stage][1]))

        for i in range(len(self.text_pattern[self.stage][1])):
            item = types.KeyboardButton(self.text_pattern[self.stage][1][i])
            markup.add(item)
        return markup

    # —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–∞–Ω–¥–µ /new /start
    def get_text_per_stage(self):
        return self.text_pattern[self.STAGES[self.stage]][0]

    def get_tag_office_remote(self) -> tuple:
        # todo refactoring
        result = ''
        is_remote = True
        is_office = True

        # –≥–æ—Ä–æ–¥
        office_place = None

        # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç none –≤ —à–∞–≥–µ remote
        if self.info["remote"].lower().find('none') != -1:
            is_remote = False
        else:
            result = '#Remote'

        # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç none –≤ —à–∞–≥–µ office
        if self.info["office"].lower().find('none') != -1:
            is_office = False
        else:
            office_place = self.info[self.STAGES[8]]
            if office_place[0].islower():
                office_place = office_place.title()
            if is_remote:
                result += ' '
            result += '#Office'
        return result, office_place

    # todo –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤ —Ç–µ–≥–∞—Ö - –∑–∞–º–µ—Ç–∏–ª –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä—ã–≥–∞–µ—Ç –∫–µ–π—Å
    def get_tags(self):
        platforms = ''
        for item in self.info[self.STAGES[6]].split(','):
            platforms += f'#{item.strip()} '

        # todo –≤—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_company_name()
        company = ''
        if self.info['company_name'].lower().find('none') != -1:
            company = 'indie'
        else:
            company = self.info['company_name'].strip().title()
            company = company.replace(' ', '')

        full_part_contract = 'FullTime'
        match self.info['schedule'].strip().lower():
            # 'Full-time', 'Part-time', 'Contract'
            case 'full-time':
                full_part_contract = 'FullTime'
            case 'part-time':
                full_part_contract = 'PartTime'
            case 'contract':
                full_part_contract = 'Contract'

        return f'#UnrealEngine #GameDev #{full_part_contract} #{self.info[self.STAGES[4]].capitalize()} #{self.info["skill_level"].capitalize()} {self.get_platforms(is_tags=True)} {self.get_tag_office_remote()[0]} #{company.capitalize()}'

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –≤ UPPER CASE
    def get_vacancy_title(self):
        return self.info['vacancy_title'].strip().upper()

    # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–∏–∏
    def get_company_name(self, is_tag=False):
        if self.info['company_name'].lower().find('none') != -1:
            return ''
        else:
            return f"({self.info['company_name'].title() if self.info['company_name'].islower() else self.info['company_name']})"

    # –ª–µ—Ç –æ–ø—ã—Ç–∞
    def get_years(self):
        if self.info['years'].lower().find('none') == -1 and self.info['years'].lower().isdigit():
            return f"({self.info['years']}+)"
        else:
            return ''

    # –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã - —É–¥–∞–ª–µ–Ω–Ω–æ, –æ—Ñ–∏—Å
    # todo refactoring
    def get_location(self):

        result = ''
        remote_str = ''
        office_str = ''
        office_remote_tuple = []
        office_place = None
        if self.info['remote'].lower().find('none') == -1:
            remote_str = 'üåé –£–¥–∞–ª–µ–Ω–Ω–æ'
            office_remote_tuple.append(remote_str)
        if self.info['office'].lower().find('none') == -1:
            office_str = 'üëî –û—Ñ–∏—Å'
            if self.info['office'].find("–ù–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥") == -1:
                office_str += f"({self.info['office'].title() if self.info['office'][0].islower else self.info['office']})"
            office_remote_tuple.append(office_str)
        return ' || '.join(office_remote_tuple)

    # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç—ã
    # todo refactoring
    def get_platforms(self, is_tags=False):
        result = []
        for i in self.info['platform'].split(","):
            i = i.strip()
            # –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –ø–∏—à—É—Ç—Å—è –∫–∞–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            # todo refactoring
            if len(i) < 4 or i in ('VR/AR'):
                if is_tags:
                    result.append('#' + i.upper())
                else:
                    result.append(i.upper())
            else:
                if is_tags:
                    result.append('#' + i.title())
                else:
                    result.append(i.title())

        return ' '.join(result) if is_tags else ', '.join(result)

    # –ø–∞—Ä—Å–∏—Ç –ø–æ —à–∞–±–ª–æ–Ω—É —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–æ–∫. –†–∞–∑–±–∏–≤–∞—è –ø–æ "="
    # todo refactoring
    def get_bullet_text(self, info_key):
        template_bullet = {
            'description': 'ü¶Ñ ',
            'resp': 'üöÄ –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å',
            'require': 'üìö –¢–≤–æ–∏ —Å–∫–∏–ª–ª—ã',
            'plus': 'üëç –ö—Ä—É—Ç–æ, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å',
            'cond': 'üç™ –£—Å–ª–æ–≤–∏—è –∏ –ø–ª—é—à–∫–∏',
            'useful': '‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        }
        if self.info[info_key].lower().find('none') != -1:
            return ''

        result = ''
        result += f"<b>{template_bullet[info_key]}</b>"
        if info_key == 'description':
            return result + self.info[info_key] + '\n\n'

        list_items = self.info[info_key].split('=')

        list_items = list(map(str.strip, list_items))
        for item in list_items:
            if item:
                result += '\n‚Ä¢ ' + item.replace(';', '')
        result += '\n\n'

        return result

    # todo —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    def get_contacts(self):
        resource_name_exp = r'^((?!-)[A-Za-z0-9-]{1, 63}(?<!-)\\.)+[A-Za-z]{2, 6}$'
        result = 'üì® –ö–æ–Ω—Ç–∞–∫—Ç—ã \n'
        return result + self.info['contacts']

    # –∏—Ç–æ–≥–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
    def get_ready_vacancy(self):
        result = f"""
{self.get_tags()}\n
<b>{self.info['skill_level'].upper()} {self.get_vacancy_title()} {self.get_company_name()}</b>

üïπ {self.info['game_title'].title()} ({self.get_platforms()})
üß† {self.info['skill_level'].title()} {self.get_years()}
üí∞ {self.info['money'].capitalize()}
‚è∞ {self.info['schedule'].title()}
    """
        result += f"{self.get_location()}\n\n"
        result += f"{self.get_bullet_text('description')}"
        result += f"{self.get_bullet_text('resp')}"
        result += f"{self.get_bullet_text('require')}"
        result += f"{self.get_bullet_text('plus')}"
        result += f"{self.get_bullet_text('cond')}"
        result += f"{self.get_bullet_text('useful')}"
        result += f"{self.get_contacts()}\n–í–∞–∫–∞–Ω—Å–∏—è –Ω–∞"
        return result
