import re

from aiogram import types

vacancy_per_user = {}


class Vacancy:
    def __init__(self):
        self.stage = 0

    def __str__(self):
        return self.info

    STAGES = {
        0: "vacancy_title",
        1: "skill_level",
        2: "company_name",
        3: "game_title",
        4: 'art_code',
        5: 'years',
        6: "platform",
        7: 'remote',
        8: "office",
        9: 'money',
        10: 'schedule',
        11: 'description',
        12: 'resp',
        13: 'require',
        14: "plus",
        15: "cond",
        16: 'useful',
        17: 'contacts',
    }
    text_pattern = {
        0: ("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏üëá",
            ('UNREAL ENGINE C++ DEVELOPER', 'UNREAL ENGINE DEVELOPER', 'GAME DESIGNER', '3D ARTIST')),
        1: ("–£—Ä–æ–≤–µ–Ω—å Skillüëá", ('junior', 'middle', 'senior')),
        2: ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏üëá", ("None",)),
        3: ("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ãüëá", ("Unknown",)),
        4: ("art / code", ('art', 'code')),
        5: ("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞üëá", ("None", 1, 2, 3, 4, 5)),
        6: ("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞üëá", (
            'PC, Console', 'PC, Mobile', 'PC, Mobile, Console', 'PC, Mobile, Console, VR', 'PC, Console, VR', 'Mobile',
            'Console', 'VR')),
        7: ("–£–¥–∞–ª–µ–Ω–∫–∞?üëá", ("None", 'remote')),
        8: ("–û—Ñ–∏—Å –µ—Å—Ç—å? –ò–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥?üëá", ("None", "–Ω–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∏–µ–≤")),
        9: ("üí∞ ?üëá", ('–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',)),
        10: ("–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?", ('Full-time', 'Part-time')),
        11: ("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", ('None',)),
        12: ("–ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å", ('None',)),
        13: ("–¢–≤–æ–∏ —Å–∫–∏–ª–ª—ã", ('None',)),
        14: ("–ö—Ä—É—Ç–æ, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å", ('None',)),
        15: ("–£—Å–ª–æ–≤–∏—è –∏ –ø–ª—é—à–∫–∏", ('None',)),
        16: (" –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", ('None',)),
        17: ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", ('Ingamejob', 'Djinni', "Head Hunter")),
    }
    info = {
    }

    def get_markup(self):
        markup = types.ReplyKeyboardMarkup(row_width=len(self.text_pattern[self.stage][1]))
        for i in range(len(self.text_pattern[self.stage][1])):
            item = types.KeyboardButton(self.text_pattern[self.stage][1][i])
            markup.add(item)
        return markup

    def get_text(self):
        return self.text_pattern[self.stage][0]

    def get_office_remote(self) -> tuple:
        result = ''
        is_remote = True
        is_office = True
        office_place = None
        if self.info[self.STAGES[7]].lower().find('none') != -1:
            is_remote = False
        else:
            result = '#remote '
        if self.info[self.STAGES[8]].lower().find('none') != -1:
            is_office = False
        else:
            office_place = self.info[self.STAGES[8]].title()
            result += '#office'
        return result, office_place

    def get_tags(self):
        platforms = ''
        for item in self.info[self.STAGES[6]].split(','):
            platforms += f'#{item.strip()} '
        company = ''
        if self.info['company_name'].find('none') != -1:
            company = 'indie'
        else:
            company = self.info['company_name'].strip().title()
            company = company.replace(' ', '')
        return f'#unrealengine #gamedev #{self.info[self.STAGES[4]]} #{self.info[self.STAGES[1]]} {platforms} {self.get_office_remote()[0]} #{company}'

    def get_vacancy_title(self):
        return self.info['vacancy_title'].strip().upper()

    def get_company_name(self):
        if self.info['company_name'].find('none') != -1:
            return ''
        else:
            return f"({self.info['company_name'].title()})"

    def get_years(self):
        if self.info['years'].find('none') == -1 and self.info['years'].isdigit():
            return f"({self.info['years']}+)"
        else:
            return ''

    def get_location(self):
        result = ''
        remote_str = ''
        office_str = ''
        office_remote_tuple = []
        office_place = None
        if self.info['remote'].lower().find('none') == -1:
            remote_str = 'üåé –£–¥–∞–ª–µ–Ω–Ω–æ'
            office_remote_tuple.append(remote_str)
        if self.info['office'].lower().find('none') == -1:
            office_str = 'üëî –û—Ñ–∏—Å'
            if self.info['office'].find("–Ω–µ –Ω–∞–ø–∏—Å–∞–Ω –≥–æ—Ä–æ–¥") == -1:
                office_str += f" ({self.info['office'].title()})"
            office_remote_tuple.append(office_str)
        return ' || '.join(office_remote_tuple)

    def get_bullet_text(self, info_key):
        return self.info.get(info_key, '')

    def get_ready_vacancy(self):
        result = f"""
{self.get_tags()}\n
<b>{self.info['skill_level'].upper()} {self.get_vacancy_title()} {self.get_company_name()}</b>\n
üïπ{self.info['game_title'].title()} ({self.info['platform'].title()})
üß†{self.info['skill_level'].title()} {self.get_years()}
üí∞{self.info['money'].lower()}
‚è∞{self.info['schedule'].title()}
{self.get_location()}\n
ü¶Ñ {self.info['description']}\n
<b>üöÄ –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å</b>
{self.get_bullet_text('resp')}\n
<b>üìö –¢–≤–æ–∏ —Å–∫–∏–ª–ª—ã</b>
{self.get_bullet_text('require')}\n
<b>üëç –ö—Ä—É—Ç–æ, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å</b>
{self.get_bullet_text('plus')}\n
<b>üç™ –£—Å–ª–æ–≤–∏—è –∏ –ø–ª—é—à–∫–∏</b>
{self.get_bullet_text('cond')}\n
<b>‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
{self.get_bullet_text('useful')}\n
<b>üì® –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>
{self.info['contacts']}
–í–∞–∫–∞–Ω—Å–∏—è –Ω–∞ hh
"""
        return result
