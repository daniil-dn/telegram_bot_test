import logging

from aiogram import Bot, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.executor import start_webhook

from mytoken import TOKEN as API_TOKEN
from Vacancy import vacancy_per_user, Vacancy, types
from testing.sqllighter3 import SQLighter

WEBHOOK_HOST = 'https://2f1b-185-135-150-187.ngrok.io'
WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = 'localhost'
WEBAPP_PORT = 4443

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


# –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ default - 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
async def clear_prev_messages(current_message, chat_id, count_to_delete=5):
    if not (chat_id and current_message):
        return None
    counter = current_message
    while True:
        if counter == current_message - count_to_delete:
            break
        try:
            await bot.delete_message(chat_id=chat_id, message_id=counter)

        except:
            print('No message to dlt')
            continue
        finally:
            counter -= 1


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message_handler(commands=['new', 'start'])
async def start_over(message: types.Message):
    # —É–¥–∞–ª—è–µ—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ù–û - 1 –ø–æ—ç—Ç–æ–º—É –Ω–µ —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ
    await clear_prev_messages(message.message_id - 1, chat_id=message.chat.id)

    # start_message —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ callback
    start_message = await bot.send_message(message.chat.id, "üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ", reply_markup=None)

    # –°–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å. –ò –ø–æ–∑–∂–µ –∑–∞–ø–∏—Ö–∏–≤–∞–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
    mg = await bot.send_message(message.chat.id, "STARTING", reply_markup=None, parse_mode='html')
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —á–∞—Ç–æ–º
    cur_vacancy = Vacancy(message_id=mg.message_id, chat_id=message.chat.id)

    # –ß—Ç–æ–±—ã –≤ –ø–µ—Ä–≤–æ–º callback —É–¥–∞–ª–∏—Ç—å Start_message
    cur_vacancy.start_message = start_message

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫ —á–∞—Ç—É
    vacancy_per_user[message.chat.id] = cur_vacancy

    # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ —Ç–µ–∫—Å—Ç
    kb, text_message = cur_vacancy.cur_kb, cur_vacancy.cur_text_for_message
    await bot.edit_message_text(chat_id=cur_vacancy.chat_id, message_id=cur_vacancy.message_id, text=text_message,
                                reply_markup=kb, parse_mode='html')


# TODO —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—é = –ø–æ–∑–∂–µ
@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    pass


# TODO –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ –¥—Ä.
@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    chat_id = message.chat.id
    cur_vacancy = vacancy_per_user.get(chat_id, None)
    if not cur_vacancy:
        await start_over(message)
    else:
        data = message.text
        cur_vacancy.update_data(data)
        cur_vacancy.next_step()

        kb = cur_vacancy.cur_kb
        text_message = cur_vacancy.cur_text_for_message

        # —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∏—á–µ–≥–æ!
        await clear_prev_messages(message.message_id, message.chat.id, 1)
        await bot.edit_message_text(chat_id=chat_id, message_id=cur_vacancy.message_id, text=text_message,
                                    reply_markup=kb,
                                    parse_mode='html')
        if cur_vacancy.is_ready_vacancy:
            mg = await bot.send_message(chat_id=chat_id, text='/new')
            cur_vacancy.message_id = mg.message_id


@dp.callback_query_handler(lambda call: True)
async def callback_inline(cb):
    # –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    chat_id = cb.message.chat.id
    cur_vacancy = vacancy_per_user.get(chat_id, None)
    if not cur_vacancy:  # –ï—Å–ª–∏ –Ω–µ—Ç —É —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ -
        # —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É,
        # !*–º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–±—É—Ç–∞
        await bot.edit_message_text(chat_id=chat_id, message_id=cb.message.message_id, text="/start", reply_markup=None)
        await start_over(cb.message)
        return

    if cur_vacancy.start_message:  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∫–µ—Ç–∞–º–∏
        await bot.delete_message(chat_id=cb.message.chat.id, message_id=cur_vacancy.start_message.message_id)
        cur_vacancy.start_message = None

    cur_vacancy.update_data(cb.data)  # –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    cur_vacancy.next_step()  # –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–≥ + 1 –ø—Ä–æ–≤–æ–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ª–µ–¥. —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ =+ 1
    kb = cur_vacancy.cur_kb
    text_message = cur_vacancy.cur_text_for_messages

    await bot.edit_message_text(chat_id=chat_id, message_id=cur_vacancy.message_id, text=text_message,
                                reply_markup=kb, parse_mode='html')

    if cur_vacancy.is_ready_vacancy:
        mg = await bot.send_message(chat_id=chat_id, text='–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –í–≤–µ–¥–∏ /new')
        cur_vacancy.message_id = mg.message_id

    await bot.answer_callback_query(show_alert=False, callback_query_id=cb.id, text=cb.data)


async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    # insert code here to run it after start


async def on_shutdown(dp):
    logging.warning('Shutting down..')

    # insert code here to run it before shutdown

    # Remove webhook (not acceptable in some cases)
    await bot.delete_webhook()

    # Close DB connection (if used)
    await dp.storage.close()
    await dp.storage.wait_closed()

    logging.warning('Bye!')


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
