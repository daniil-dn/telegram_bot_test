import logging
from aiogram import Bot, Dispatcher, executor

import mytoken
from Vacancy import vacancy_per_user, Vacancy, types
from testing.sqllighter3 import SQLighter

logging.basicConfig(level=logging.INFO)

# Bot init
bot = Bot(token=mytoken.TOKEN)
dp = Dispatcher(bot)
db = SQLighter('db.db')


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message_handler(commands=['new', 'start'])
async def start_over(message: types.Message):
    vacancy_per_user[message.chat.id] = Vacancy()
    text = vacancy_per_user[message.chat.id].get_text_per_stage()
    markup = vacancy_per_user[message.chat.id].get_markup()
    await bot.send_message(message.chat.id, "üöÄ Starting", reply_markup=None)
    await bot.send_message(message.chat.id, text, reply_markup=markup)


# –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message_handler(commands=['current'])
async def show_current_stage(message: types.Message):
    await bot.send_message(message.chat.id, str(f'You are at: '))


@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    # –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –±—ã–ª–æ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é, –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    vacancy_per_user.setdefault(message.chat.id, Vacancy())
    vacancy_obj = vacancy_per_user[message.chat.id]

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –º–µ–Ω—å—à–µ –º–∞—Å—Å–∏–≤–∞ –≤—Å–µ—Ö —à–∞–≥–æ–≤
    if vacancy_obj.stage < len(vacancy_obj.STAGES):
        vacancy_obj.info[vacancy_obj.STAGES[vacancy_obj.stage]] = message.text.strip()

        vacancy_obj.stage += 1

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–µ–∫—É—â–∏–π —à–∞–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞
        if vacancy_obj.stage < len(vacancy_obj.STAGES):
            await bot.send_message(message.chat.id, vacancy_obj.get_text_per_stage(), reply_markup=vacancy_obj.get_markup())
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–∞–≤–µ–Ω –º–∞—Å—Å–∏–≤—É —à–∞–≥–æ–≤
    if vacancy_obj.stage == len(vacancy_obj.STAGES):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—É—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        markup = types.ReplyKeyboardMarkup()
        markup.add(types.KeyboardButton('/new'))
        await bot.send_message(message.chat.id, vacancy_obj.get_ready_vacancy(),
                               reply_markup=markup, parse_mode='html')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
