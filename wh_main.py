import logging

from aiogram import Bot, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.executor import start_webhook

from mytoken import TOKEN as API_TOKEN
from Vacancy import vacancy_per_user, Vacancy, types
from testing.sqllighter3 import SQLighter

WEBHOOK_HOST = 'https://a3b6-185-135-150-187.ngrok.io'
WEBHOOK_PATH = '/'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = 'localhost'
WEBAPP_PORT = 80

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


# –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ default - 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
async def clear_prev_messages(current_message, chat_id, count_to_delete=5):
    if not (chat_id and current_message):
        return None
    counter = current_message
    while True:
        counter -= 1
        if counter == current_message - count_to_delete:
            break
        try:
            await bot.delete_message(chat_id=chat_id, message_id=counter)
        except:
            print('No message to dlt')
            continue


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message_handler(commands=['new', 'start'])
async def start_over(message: types.Message):
    # —É–¥–∞–ª—è–µ—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await clear_prev_messages(message.message_id, chat_id=message.chat.id)

    # start message —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ callback
    start_message = await bot.send_message(message.chat.id, "üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ", reply_markup=None)
    mg = await bot.send_message(message.chat.id, "STARTING", reply_markup=None)

    cur_vacancy = Vacancy(message_id=mg.message_id, chat_id=message.chat.id)

    cur_vacancy.start_message = start_message
    # –í–æ–æ–±—â–µ next_step –≤—ã–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ update_data, –Ω–æ –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    vacancy_per_user[message.chat.id] = cur_vacancy.next_step()

    kb = cur_vacancy.cur_kb
    text_message = cur_vacancy.cur_text_for_message
    await bot.edit_message_text(chat_id=cur_vacancy.chat_id, message_id=cur_vacancy.message_id, text=text_message,
                                reply_markup=kb)


@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    chat_id = message.chat.id
    if not vacancy_per_user.get(chat_id, None):
        await start_over(message)


@dp.callback_query_handler(lambda call: True)
async def callback_inline(cb):
    chat_id = cb.message.chat.id
    cur_vacancy = vacancy_per_user.get(chat_id, None)

    # –ï—Å–ª–∏ –Ω–µ—Ç —É —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É,
    #   –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–±—É—Ç–∞
    if not cur_vacancy:
        await bot.edit_message_text(chat_id=chat_id, message_id=cb.message.message_id, text="/start", reply_markup=None)
        await start_over(cb.message)
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∫–µ—Ç–∞–º–∏
    if cur_vacancy.start_message:
        await bot.delete_message(chat_id=cb.message.chat.id, message_id=cur_vacancy.start_message.message_id)
        cur_vacancy.start_message = None

    #  –õ–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ update_data
    #       –í–Ω—É—Ç—Ä–∏ update data –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ self.step += 1
    #       —Ç–∞–∫–∂–µ update –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç
    print(cur_vacancy.step, cur_vacancy.STAGES)
    cur_vacancy.update_data(cb.data)
    kb = cur_vacancy.cur_kb
    text_message = cur_vacancy.cur_text_for_message

    await bot.edit_message_text(chat_id=chat_id, message_id=cur_vacancy.message_id, text=text_message, reply_markup=kb)

    await bot.answer_callback_query(show_alert=False, callback_query_id=cb.id, text=cb.data)


@dp.message_handler()
async def echo(message: types.Message):
    # Regular request
    # await bot.send_message(message.chat.id, message.text)

    # or reply INTO webhook
    return SendMessage(message.chat.id, message.text)


async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    # insert code here to run it after start


async def on_shutdown(dp):
    logging.warning('Shutting down..')

    # insert code here to run it before shutdown

    # Remove webhook (not acceptable in some cases)
    await bot.delete_webhook()

    # Close DB connection (if used)
    await dp.storage.close()
    await dp.storage.wait_closed()

    logging.warning('Bye!')


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
